{"version":3,"file":"type-route.cjs.development.js","sources":["../src/typeOf.ts","../src/TypeRouteError.ts","../src/asArray.ts","../src/assert.ts","../src/buildPathDefs.ts","../src/getParamDefsOfType.ts","../src/createLocation.ts","../src/noMatch.ts","../src/stringUtils.ts","../src/getPathMatch.ts","../src/getObjectMatch.ts","../src/getStateMatch.ts","../src/getQueryMatch.ts","../src/createMatcher.ts","../src/preventDefaultLinkClickBehavior.ts","../src/buildRoute.ts","../src/createRouteBuilder.ts","../src/createQueryStringSerializer.ts","../src/getMatchingRoute.ts","../src/convertToRouterLocationFromHistoryLocation.ts","../src/getRouteByHref.ts","../src/createNavigationHandlerManager.ts","../src/attemptScrollToTop.ts","../src/serializeStateParams.ts","../src/createRouter.ts","../src/defineRoute.ts","../src/param.ts","../src/createGroup.ts","../src/react.ts"],"sourcesContent":["export function typeOf(value: any) {\n  if (value === null) {\n    return \"null\";\n  }\n\n  if (Array.isArray(value)) {\n    return \"array\";\n  }\n\n  return typeof value;\n}\n","import { ErrorDef, BuildPathDefErrorContext } from \"./types\";\nimport { typeOf } from \"./typeOf\";\n\nfunction getBuildPathDefRouteNameMessage(routeName: string) {\n  return `This problem occurred when building the route definition for the \"${routeName}\" route.`;\n}\n\nfunction getBuildPathDefErrorMessage(context: BuildPathDefErrorContext) {\n  return [\n    getBuildPathDefRouteNameMessage(context.routeName),\n    `The path was constructed as \\`${context.rawPath}\\``,\n  ];\n}\n\nexport const TypeRouteError = buildErrorCollection({\n  Path_may_not_be_an_empty_string: {\n    errorCode: 1000,\n    getDetails: getBuildPathDefErrorMessage,\n  },\n\n  Path_must_start_with_a_forward_slash: {\n    errorCode: 1001,\n    getDetails: getBuildPathDefErrorMessage,\n  },\n\n  Path_may_not_end_with_a_forward_slash: {\n    errorCode: 1002,\n    getDetails: getBuildPathDefErrorMessage,\n  },\n\n  Path_may_not_include_characters_that_must_be_URL_encoded: {\n    errorCode: 1003,\n    getDetails: (\n      context: BuildPathDefErrorContext,\n      segment: {\n        leading: string;\n        paramId?: string;\n        trailing?: string;\n      }\n    ) => {\n      const leading = segment.leading;\n      const trailing = segment.trailing ?? \"\";\n      const paramId = segment.paramId ?? \"\";\n\n      const invalidCharacters = (leading + trailing)\n        .split(\"\")\n        .filter((character) => character !== encodeURIComponent(character));\n\n      return [\n        ...getBuildPathDefErrorMessage(context),\n        `The path segment \\`${\n          leading + paramId + trailing\n        }\\` has the following invalid characters: ${invalidCharacters.join(\n          \", \"\n        )}`,\n      ];\n    },\n  },\n\n  Path_may_not_include_empty_segments: {\n    errorCode: 1004,\n    getDetails: (context: BuildPathDefErrorContext) => {\n      return [\n        ...getBuildPathDefErrorMessage(context),\n        \"Empty segments can be spotted by finding the place in the path with two consecutive forward slashes '//'.\",\n      ];\n    },\n  },\n\n  Path_may_have_at_most_one_parameter_per_segment: {\n    errorCode: 1005,\n    getDetails: (\n      context: BuildPathDefErrorContext,\n      parameterNames: string[]\n    ) => {\n      return [\n        ...getBuildPathDefErrorMessage(context),\n        `A single segment of the path included the following parameters: ${parameterNames}`,\n        \"Consider using ofType with a customer ValueSerializer for this scenario.\",\n      ];\n    },\n  },\n\n  Path_parameters_may_not_be_used_more_than_once_when_building_a_path: {\n    errorCode: 1005,\n    getDetails: (context: BuildPathDefErrorContext, parameterName: string) => {\n      return [\n        ...getBuildPathDefErrorMessage(context),\n        `The parameter \"${parameterName}\" was used more than once.`,\n      ];\n    },\n  },\n\n  Optional_path_parameters_may_not_have_any_text_around_the_parameter: {\n    errorCode: 1006,\n    getDetails: (\n      context: BuildPathDefErrorContext,\n      parameterName: string,\n      leadingText: string,\n      trailingText: string\n    ) => {\n      const messages = getBuildPathDefErrorMessage(context);\n\n      if (leadingText) {\n        messages.push(\n          `The parameter \"${parameterName}\" cannot be preceded by \"${leadingText}\".`\n        );\n      }\n\n      if (trailingText) {\n        messages.push(\n          `The parameter \"${parameterName}\" cannot be followed by \"${trailingText}\".`\n        );\n      }\n\n      return messages;\n    },\n  },\n\n  Path_may_have_at_most_one_optional_or_trailing_parameter: {\n    errorCode: 1007,\n    getDetails(\n      context: BuildPathDefErrorContext,\n      numOptionalTrailingParameterNames: number\n    ) {\n      return [\n        ...getBuildPathDefErrorMessage(context),\n        `At most one optional/trailing parameter should be given but ${numOptionalTrailingParameterNames} were provided.`,\n      ];\n    },\n  },\n\n  Optional_or_trailing_path_parameters_may_only_appear_in_the_last_path_segment:\n    {\n      errorCode: 1008,\n      getDetails: getBuildPathDefErrorMessage,\n    },\n\n  All_path_parameters_must_be_used_in_path_construction: {\n    errorCode: 1009,\n    getDetails(context: BuildPathDefErrorContext, unusedParameters: string[]) {\n      return [\n        ...getBuildPathDefErrorMessage(context),\n        `The following parameters were not used: ${unusedParameters.join(\n          \", \"\n        )}`,\n      ];\n    },\n  },\n\n  Path_parameter_name_must_not_include_curly_brackets_dollar_signs_or_the_forward_slash_character:\n    {\n      errorCode: 1010,\n      getDetails(routeName: string, paramName: string) {\n        return [\n          getBuildPathDefRouteNameMessage(routeName),\n          `The $ { } or / character was used in this parameter name: ${paramName}`,\n        ];\n      },\n    },\n\n  Extension_route_definition_parameter_names_may_not_be_the_same_as_base_route_definition_parameter_names:\n    {\n      errorCode: 1011,\n      getDetails(duplicateParameterNames: string[]) {\n        return [\n          `The following parameter names were used in both the base route definition and the extension: ${duplicateParameterNames.join(\n            \", \"\n          )}`,\n        ];\n      },\n    },\n\n  Expected_type_does_not_match_actual_type: {\n    errorCode: 1012,\n    getDetails({\n      context,\n      value,\n      valueName,\n      expectedType,\n      actualType,\n    }: {\n      context: string;\n      valueName: string;\n      expectedType: string | string[];\n      actualType: string;\n      value: any;\n    }) {\n      return [\n        `Problem found with your usage of \\`${context}\\``,\n        `\\`${valueName}\\` was expected to be of type \\`${\n          Array.isArray(expectedType) ? expectedType.join(\" | \") : expectedType\n        }\\` but was of type \\`${actualType}\\``,\n        `The actual value provided was: ${\n          typeOf(value) === \"object\"\n            ? \"\\n\" +\n              JSON.stringify(value, null, 2)\n                .split(\"\\n\")\n                .map((line) => `  ${line}`)\n                .join(\"\\n\")\n            : \"`\" + value + \"`\"\n        }`,\n      ];\n    },\n  },\n\n  Expected_number_of_arguments_does_match_actual_number: {\n    errorCode: 1013,\n    getDetails({\n      context,\n      args,\n      min,\n      max,\n    }: {\n      context: string;\n      args: any[];\n      min: number;\n      max: number;\n    }) {\n      return [\n        `Problem found with your usage of \\`${context}\\``,\n        `Expected ${min}${min === max ? \"\" : \" - \" + max} but received ${\n          args.length\n        } argument${args.length === 1 ? \"\" : \"s\"}`,\n      ];\n    },\n  },\n\n  Query_string_array_format_and_custom_query_string_serializer_may_not_both_be_provided:\n    {\n      errorCode: 1014,\n      getDetails() {\n        return [\n          \"You may not provide both options.arrayFormat.queryString and options.queryStringSerializer. These options are not compatible.\",\n        ];\n      },\n    },\n\n  Expected_length_of_array_does_match_actual_length: {\n    errorCode: 1015,\n    getDetails({\n      context,\n      array,\n      min,\n      max,\n    }: {\n      context: string;\n      array: any[];\n      min: number;\n      max: number;\n    }) {\n      return [\n        `Problem found with your usage of \\`${context}\\``,\n        `Expected array to be of length ${min}${\n          min === max ? \"\" : \" - \" + max\n        } but actual length was ${array.length}`,\n      ];\n    },\n  },\n\n  Encountered_unexpected_parameter_when_building_route: {\n    errorCode: 1016,\n    getDetails({\n      routeName,\n      unexpectedParameterName,\n      allowedParameterNames,\n    }: {\n      routeName: string;\n      unexpectedParameterName: string;\n      allowedParameterNames: string[];\n    }) {\n      return [\n        `Problem found with your usage of routes.${routeName}( ... )`,\n        `Unexpected parameter passed to route builder named \"${unexpectedParameterName}\"`,\n        allowedParameterNames.length === 0\n          ? \"The route does not take any parameters\"\n          : `This route takes the following parameters: ${allowedParameterNames\n              .map((name) => `\"${name}\"`)\n              .join(\", \")}`,\n      ];\n    },\n  },\n\n  Missing_required_parameter_when_building_route: {\n    errorCode: 1017,\n    getDetails({\n      routeName,\n      missingParameterName,\n    }: {\n      routeName: string;\n      missingParameterName: string;\n    }) {\n      return [\n        `Problem found with your usage of routes.${routeName}( ... )`,\n        `The parameter \"${missingParameterName}\" is required but was not provided.`,\n      ];\n    },\n  },\n\n  Base_url_must_start_with_a_forward_slash: {\n    errorCode: 1018,\n    getDetails(baseUrl: string) {\n      return [\n        'Base URL must start with a forward slash \"/\"',\n        `The value you provided \"${baseUrl}\" does not start with a forward slash.`,\n      ];\n    },\n  },\n\n  Base_url_must_not_contain_any_characters_that_must_be_url_encoded: {\n    errorCode: 1019,\n    getDetails(baseUrl: string) {\n      const invalidCharacters = baseUrl\n        .replace(/\\//g, \"\")\n        .split(\"\")\n        .filter((character) => character !== encodeURIComponent(character));\n      return [\n        `The following characters are invalid: ${invalidCharacters.join(\n          \", \"\n        )}.`,\n      ];\n    },\n  },\n\n  App_should_be_wrapped_in_a_RouteProvider_component: {\n    errorCode: 1020,\n    getDetails() {\n      return [\n        \"Your application must be wrapped in the `RouteProvider` component returned by `createRouter` in order to use the `useRoute` hook.\",\n      ];\n    },\n  },\n\n  Invalid_React_version: {\n    errorCode: 1021,\n    getDetails(version: string) {\n      return [\n        \"React version must be 16.8 or greater.\",\n        `You have version ${version} installed.`,\n        \"If you cannot upgrade the React version try using `type-route/core`.\",\n      ];\n    },\n  },\n});\n\nfunction buildErrorCollection<\n  TErrorDefCollection extends Record<string, ErrorDef>\n>(definitions: TErrorDefCollection) {\n  const errors: Record<\n    string,\n    {\n      name: string;\n      errorCode: number;\n      create(...args: any[]): Error;\n    }\n  > = {};\n\n  Object.keys(definitions).forEach((key) => {\n    const name = key.replace(/_/g, \" \") + \".\";\n    const { errorCode, getDetails } = definitions[key];\n    const messageTitle = `TR${errorCode} · ${name}`;\n\n    errors[key] = {\n      errorCode,\n      name,\n      create(...args: any[]) {\n        const message = (getDetails?.(...args) ?? [])\n          .map((detail) => `- ${detail}`)\n          .join(\"\\n\");\n\n        const error = new Error(\n          message\n            ? `\\n\\n${messageTitle}\\n\\n${message}\\n`\n            : `\\n\\n${messageTitle}\\n`\n        );\n        error.name = `(hopefully helpful 😄) TypeRouteError`;\n\n        return error;\n      },\n    };\n  });\n\n  return errors as {\n    [TName in keyof TErrorDefCollection]: {\n      create(\n        ...args: Parameters<TErrorDefCollection[TName][\"getDetails\"]>\n      ): Error;\n      name: TName;\n      errorCode: TErrorDefCollection[TName][\"errorCode\"];\n    };\n  };\n}\n","export function asArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n","import { TypeRouteError } from \"./TypeRouteError\";\nimport { typeOf } from \"./typeOf\";\n\nexport function assert(\n  context: string,\n  assertions: ((context: string) => void)[]\n) {\n  assertions.forEach((assert) => assert(context));\n}\n\nassert.arrayLength =\n  (array: any[], min: number, max = min) =>\n  (context: string) => {\n    if (array.length < min || array.length > max) {\n      throw TypeRouteError.Expected_length_of_array_does_match_actual_length.create(\n        {\n          context,\n          array,\n          min,\n          max,\n        }\n      );\n    }\n  };\n\nassert.numArgs =\n  (args: any[], min: number, max = min) =>\n  (context: string) => {\n    if (args.length < min || args.length > max) {\n      throw TypeRouteError.Expected_number_of_arguments_does_match_actual_number.create(\n        {\n          context,\n          args,\n          min,\n          max,\n        }\n      );\n    }\n  };\n\nassert.collectionOfType =\n  (expectedType: string | string[], valueName: string, value: any) =>\n  (context: string) => {\n    if (typeOf(value) === \"object\") {\n      const valuePropertyNames = Object.keys(value);\n\n      for (const propertyName of valuePropertyNames) {\n        assert.type(\n          expectedType,\n          `${valueName}.${propertyName}`,\n          value[propertyName]\n        )(context);\n      }\n\n      return;\n    }\n\n    throw TypeRouteError.Expected_type_does_not_match_actual_type.create({\n      context,\n      actualType: typeOf(value),\n      expectedType: `Record<string, ${\n        Array.isArray(expectedType) ? expectedType.join(\" | \") : expectedType\n      }>`,\n      value,\n      valueName,\n    });\n  };\n\nassert.arrayOfType =\n  (expectedType: string | string[], valueName: string, value: any) =>\n  (context: string) => {\n    if (Array.isArray(value)) {\n      for (let index = 0; index < value.length; index++) {\n        assert.type(\n          expectedType,\n          `${valueName}[${index}]`,\n          value[index]\n        )(context);\n      }\n\n      return;\n    }\n\n    throw TypeRouteError.Expected_type_does_not_match_actual_type.create({\n      context,\n      actualType: typeOf(value),\n      expectedType: `Array<${\n        Array.isArray(expectedType) ? expectedType.join(\" | \") : expectedType\n      }>`,\n      value,\n      valueName,\n    });\n  };\n\nassert.type =\n  (expectedType: string | string[], valueName: string, value: any) =>\n  (context: string) => {\n    const expectedTypeList =\n      typeof expectedType === \"string\" ? [expectedType] : expectedType;\n\n    for (const expectedType of expectedTypeList) {\n      const expectsProperType =\n        expectedType[0].toUpperCase() === expectedType[0];\n\n      if (\n        (expectsProperType &&\n          (typeOf(value) === \"object\" || typeOf(value) === \"function\") &&\n          typeOf(value[\"~internal\"]) === \"object\" &&\n          value[\"~internal\"].type === expectedType) ||\n        (!expectsProperType && typeOf(value) === expectedType)\n      ) {\n        return;\n      }\n    }\n\n    throw TypeRouteError.Expected_type_does_not_match_actual_type.create({\n      context,\n      actualType: typeOf(value),\n      expectedType,\n      value,\n      valueName,\n    });\n  };\n","import { TypeRouteError } from \"./TypeRouteError\";\nimport {\n  PathParamDef,\n  NamedPathParamDef,\n  BuildPathDefErrorContext,\n  GetRawPath,\n  PathDef,\n  ParamIdCollection,\n} from \"./types\";\nimport { asArray } from \"./asArray\";\nimport { assert } from \"./assert\";\n\nexport function buildPathDefs(\n  routeName: string,\n  pathParamDefCollection: Record<string, PathParamDef>,\n  getRawPath: GetRawPath\n): PathDef[] {\n  const namedPathParamDefs = Object.keys(pathParamDefCollection).map(\n    (paramName) => {\n      const namedPathParameterDefinition: NamedPathParamDef = {\n        paramName,\n        ...pathParamDefCollection[paramName],\n      };\n\n      return namedPathParameterDefinition;\n    }\n  );\n\n  const paramIdCollection: ParamIdCollection = {};\n\n  namedPathParamDefs.forEach(({ paramName }) => {\n    if (__DEV__) {\n      if (\n        paramName.indexOf(\"$\") >= 0 ||\n        paramName.indexOf(\"{\") >= 0 ||\n        paramName.indexOf(\"}\") >= 0 ||\n        paramName.indexOf(\"/\") >= 0\n      ) {\n        throw TypeRouteError.Path_parameter_name_must_not_include_curly_brackets_dollar_signs_or_the_forward_slash_character.create(\n          routeName,\n          paramName\n        );\n      }\n    }\n\n    paramIdCollection[paramName] = getParamId(paramName);\n  });\n\n  const rawPath = getRawPath(paramIdCollection);\n\n  if (__DEV__) {\n    if (Array.isArray(rawPath)) {\n      assert(`ReturnType<${routeName}.path>`, [\n        assert.arrayOfType(\"string\", \"path\", rawPath),\n        assert.arrayLength(rawPath, 1, Infinity),\n      ]);\n    } else {\n      assert(`ReturnType<${routeName}.path>`, [\n        assert.type(\"string\", \"path\", rawPath),\n      ]);\n    }\n  }\n\n  return asArray(rawPath).map((rawPath) => {\n    const errorContext: BuildPathDefErrorContext = {\n      rawPath,\n      routeName,\n    };\n\n    if (__DEV__) {\n      if (rawPath.length === 0) {\n        throw TypeRouteError.Path_may_not_be_an_empty_string.create(\n          errorContext\n        );\n      }\n\n      if (rawPath[0] !== \"/\") {\n        throw TypeRouteError.Path_must_start_with_a_forward_slash.create(\n          errorContext\n        );\n      }\n    }\n\n    if (rawPath.length === 1) {\n      return [];\n    }\n\n    if (__DEV__) {\n      if (rawPath.length > 0 && rawPath[rawPath.length - 1] === \"/\") {\n        throw TypeRouteError.Path_may_not_end_with_a_forward_slash.create(\n          errorContext\n        );\n      }\n    }\n\n    const rawPathSegments = rawPath.split(\"/\").slice(1);\n\n    const usedPathParams: Record<string, true> = {};\n    const pathDef: PathDef = [];\n\n    for (const rawSegment of rawPathSegments) {\n      if (__DEV__) {\n        if (rawSegment.length === 0) {\n          throw TypeRouteError.Path_may_not_include_empty_segments.create(\n            errorContext\n          );\n        }\n      }\n\n      let includedParamDef: NamedPathParamDef<unknown> | null = null;\n\n      for (const paramDef of namedPathParamDefs) {\n        if (rawSegment.indexOf(getParamId(paramDef.paramName)) >= 0) {\n          if (__DEV__) {\n            if (includedParamDef !== null) {\n              throw TypeRouteError.Path_may_have_at_most_one_parameter_per_segment.create(\n                errorContext,\n                [paramDef.paramName, includedParamDef.paramName]\n              );\n            }\n\n            if (usedPathParams[paramDef.paramName]) {\n              throw TypeRouteError.Path_parameters_may_not_be_used_more_than_once_when_building_a_path.create(\n                errorContext,\n                paramDef.paramName\n              );\n            }\n          }\n\n          includedParamDef = paramDef;\n          usedPathParams[paramDef.paramName] = true;\n        }\n      }\n\n      if (includedParamDef) {\n        const [leading, trailing] = rawSegment.split(\n          getParamId(includedParamDef.paramName)\n        );\n\n        if (__DEV__) {\n          if (\n            encodeURIComponent(leading) !== leading ||\n            encodeURIComponent(trailing) !== trailing\n          ) {\n            throw TypeRouteError.Path_may_not_include_characters_that_must_be_URL_encoded.create(\n              errorContext,\n              {\n                leading,\n                paramId: getParamId(includedParamDef.paramName),\n                trailing,\n              }\n            );\n          }\n\n          if (\n            includedParamDef[\"~internal\"].optional &&\n            (leading !== \"\" || trailing !== \"\")\n          ) {\n            throw TypeRouteError.Optional_path_parameters_may_not_have_any_text_around_the_parameter.create(\n              errorContext,\n              includedParamDef.paramName,\n              leading,\n              trailing\n            );\n          }\n        }\n\n        pathDef.push({\n          leading,\n          trailing,\n          namedParamDef: includedParamDef,\n        });\n      } else {\n        if (__DEV__) {\n          if (encodeURIComponent(rawSegment) !== rawSegment) {\n            throw TypeRouteError.Path_may_not_include_characters_that_must_be_URL_encoded.create(\n              errorContext,\n              { leading: rawSegment }\n            );\n          }\n        }\n\n        pathDef.push({\n          leading: rawSegment,\n          trailing: \"\",\n          namedParamDef: null,\n        });\n      }\n    }\n\n    const numOptionalOrTrailingParams = pathDef.filter(\n      (part) =>\n        part.namedParamDef?.[\"~internal\"].optional ||\n        part.namedParamDef?.[\"~internal\"].trailing\n    ).length;\n\n    if (__DEV__) {\n      if (numOptionalOrTrailingParams > 1) {\n        throw TypeRouteError.Path_may_have_at_most_one_optional_or_trailing_parameter.create(\n          errorContext,\n          numOptionalOrTrailingParams\n        );\n      }\n    }\n\n    const lastPathSegmentParameterDefinition =\n      pathDef[pathDef.length - 1].namedParamDef;\n\n    if (__DEV__) {\n      if (\n        numOptionalOrTrailingParams === 1 &&\n        !lastPathSegmentParameterDefinition?.[\"~internal\"].optional &&\n        !lastPathSegmentParameterDefinition?.[\"~internal\"].trailing\n      ) {\n        throw TypeRouteError.Optional_or_trailing_path_parameters_may_only_appear_in_the_last_path_segment.create(\n          errorContext\n        );\n      }\n    }\n\n    const unusedPathParameterDefinitions = namedPathParamDefs\n      .map(({ paramName: name }) => name)\n      .filter((name) => !usedPathParams[name]);\n\n    if (__DEV__) {\n      if (unusedPathParameterDefinitions.length > 0) {\n        throw TypeRouteError.All_path_parameters_must_be_used_in_path_construction.create(\n          errorContext,\n          unusedPathParameterDefinitions\n        );\n      }\n    }\n\n    return pathDef;\n  });\n}\n\nfunction getParamId(parameterName: string) {\n  return \"${p.\" + parameterName + \"}\";\n}\n","import { ParamDefKind, ParamDefCollection } from \"./types\";\n\nexport function getParamDefsOfType<TParamType extends ParamDefKind>(\n  type: TParamType,\n  paramDefCollection: ParamDefCollection<ParamDefKind>\n) {\n  const filteredParamDefCollection: ParamDefCollection<TParamType> = {};\n\n  Object.keys(paramDefCollection).forEach((name) => {\n    const paramDef = paramDefCollection[name];\n    if (paramDef[\"~internal\"].kind === type) {\n      filteredParamDefCollection[name] =\n        paramDef as ParamDefCollection<TParamType>[string];\n    }\n  });\n\n  return filteredParamDefCollection;\n}\n","import {\n  RouterLocation,\n  UmbrellaParamDef,\n  UmbrellaParamDefCollection,\n  QueryStringSerializer,\n  PathDef,\n} from \"./types\";\nimport { assert } from \"./assert\";\nimport { TypeRouteError } from \"./TypeRouteError\";\nimport { typeOf } from \"./typeOf\";\n\ntype ParamWithContextCollection = Record<\n  string,\n  { valueSerializerId?: string; array: boolean; value: string | null }\n>;\n\nexport function createLocation({\n  paramCollection,\n  paramDefCollection,\n  arraySeparator,\n  queryStringSerializer,\n  pathDefs,\n  baseUrl,\n}: {\n  paramCollection: Record<string, unknown>;\n  paramDefCollection: UmbrellaParamDefCollection;\n  arraySeparator: string;\n  queryStringSerializer: QueryStringSerializer;\n  pathDefs: PathDef[];\n  baseUrl: string;\n}): RouterLocation {\n  const params = {\n    path: {} as ParamWithContextCollection,\n    query: {} as ParamWithContextCollection,\n    state: {} as ParamWithContextCollection,\n  };\n\n  for (const paramName in paramDefCollection) {\n    const paramValue = paramCollection[paramName];\n\n    if (paramValue === undefined) {\n      continue;\n    }\n\n    const paramDef = paramDefCollection[paramName];\n    const urlEncodeDefault =\n      paramDef[\"~internal\"].kind !== \"state\" && !paramDef[\"~internal\"].trailing;\n    const urlEncode =\n      paramDef[\"~internal\"].valueSerializer.urlEncode ?? urlEncodeDefault;\n\n    let value: string | null;\n\n    if (paramDef[\"~internal\"].array) {\n      if (!Array.isArray(paramValue)) {\n        if (__DEV__) {\n          throw TypeRouteError.Expected_type_does_not_match_actual_type.create({\n            context: \"routes[routeName](...)\",\n            actualType: typeOf(paramValue),\n            expectedType: \"array\",\n            value: paramValue,\n            valueName: paramName,\n          });\n        }\n      }\n\n      value =\n        (paramValue as unknown[]).length === 0\n          ? null\n          : (paramValue as unknown[])\n              .map((part) => stringify(paramDef, part, urlEncode))\n              .join(arraySeparator);\n    } else {\n      value = stringify(paramDef, paramValue, urlEncode);\n    }\n\n    params[paramDef[\"~internal\"].kind][paramName] = {\n      valueSerializerId: paramDef[\"~internal\"].valueSerializer.id,\n      array: paramDef[\"~internal\"].array,\n      value,\n    };\n  }\n\n  const path =\n    \"/\" +\n    pathDefs[0]\n      .filter(({ namedParamDef }) => {\n        return !(\n          namedParamDef?.[\"~internal\"].optional &&\n          params.path[namedParamDef.paramName] === undefined\n        );\n      })\n      .map(({ namedParamDef, leading, trailing }) => {\n        const rawParam = namedParamDef\n          ? params.path[namedParamDef.paramName].value\n          : \"\";\n        return leading + rawParam + trailing;\n      })\n      .join(\"/\");\n\n  const hasQueryParams = Object.keys(params.query).length > 0;\n\n  const query = hasQueryParams\n    ? queryStringSerializer.stringify(params.query)\n    : undefined;\n\n  if (__DEV__) {\n    if (hasQueryParams) {\n      assert(\"query\", [assert.type(\"string\", \"query\", query)]);\n    }\n  }\n\n  const state =\n    Object.keys(params.state).length === 0\n      ? undefined\n      : Object.keys(params.state).reduce(\n          (state, key) => ({\n            ...state,\n            [key]: params.state[key].value,\n          }),\n          {}\n        );\n\n  return {\n    fullPath: (baseUrl === \"/\" ? \"\" : baseUrl) + path,\n    path,\n    query,\n    state,\n  };\n}\n\nfunction stringify(\n  paramDef: UmbrellaParamDef,\n  value: unknown,\n  urlEncode: boolean\n) {\n  const result = paramDef[\"~internal\"].valueSerializer.stringify(value);\n\n  if (__DEV__) {\n    assert(\"[ValueSerializer].stringify\", [\n      assert.type(\"string\", \"result\", result),\n    ]);\n  }\n\n  return urlEncode ? encodeURIComponent(result) : result;\n}\n","export const noMatch = { __noMatch: true } as const;\n","export const stringUtils = { startsWith, endsWith, splitFirst };\n\nfunction startsWith(value: string, start: string) {\n  for (let i = 0; i < start.length; i++) {\n    if (start[i] !== value[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction endsWith(value: string, end: string) {\n  for (let i = 1; i <= end.length; i++) {\n    if (end[end.length - i] !== value[value.length - i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction splitFirst(value: string, split: string) {\n  const [first, ...rest] = value.split(split);\n  return [first, rest.join(split)] as const;\n}\n","import { noMatch } from \"./noMatch\";\nimport { PathDef } from \"./types\";\nimport { stringUtils } from \"./stringUtils\";\n\nconst { endsWith, startsWith } = stringUtils;\n\nexport function getPathMatch({\n  path,\n  pathDefs,\n  arraySeparator,\n}: {\n  path: string;\n  pathDefs: PathDef[];\n  arraySeparator: string;\n}) {\n  for (let index = 0; index < pathDefs.length; index++) {\n    const result = match(pathDefs[index]);\n    if (result !== false) {\n      return { ...result, primaryPath: index === 0 };\n    }\n  }\n\n  return false;\n\n  function match(pathDef: PathDef) {\n    const params: Record<string, unknown> = {};\n\n    if (path === \"/\" && pathDef.length === 0) {\n      return { params, numExtraneousParams: 0 };\n    }\n\n    const pathHasTrailingSlash = path.length > 1 && endsWith(path, \"/\");\n\n    if (pathHasTrailingSlash) {\n      path = path.slice(0, path.length - 1);\n    }\n\n    const pathSegmentList = path.split(\"/\").slice(1);\n\n    for (\n      let segmentIndex = 0;\n      segmentIndex < Math.max(pathDef.length, pathSegmentList.length);\n      segmentIndex++\n    ) {\n      const pathSegmentDef =\n        segmentIndex >= pathDef.length ? null : pathDef[segmentIndex];\n      let pathSegment =\n        segmentIndex >= pathSegmentList.length\n          ? null\n          : pathSegmentList[segmentIndex];\n\n      if (pathSegmentDef === null) {\n        return false;\n      }\n\n      const numRemainingPathSegmentDefs = pathDef.length - 1 - segmentIndex;\n\n      if (pathSegment === null) {\n        if (\n          numRemainingPathSegmentDefs !== 0 ||\n          !pathSegmentDef.namedParamDef?.[\"~internal\"].optional\n        ) {\n          return false;\n        }\n\n        break;\n      }\n\n      if (pathSegmentDef.namedParamDef?.[\"~internal\"].trailing) {\n        pathSegment = pathSegmentList.slice(segmentIndex).join(\"/\");\n      }\n\n      if (!startsWith(pathSegment, pathSegmentDef.leading)) {\n        return false;\n      }\n\n      const pathSegmentMinusLeading = pathSegment.slice(\n        pathSegmentDef.leading.length\n      );\n\n      if (!endsWith(pathSegmentMinusLeading, pathSegmentDef.trailing)) {\n        return false;\n      }\n\n      const pathSegmentMinusLeadingAndTrailing = pathSegmentMinusLeading.slice(\n        0,\n        pathSegmentMinusLeading.length - pathSegmentDef.trailing.length\n      );\n\n      if (!pathSegmentDef.namedParamDef) {\n        if (pathSegmentMinusLeadingAndTrailing === \"\") {\n          continue;\n        }\n\n        return false;\n      }\n\n      if (pathSegmentMinusLeadingAndTrailing === \"\") {\n        if (pathSegmentDef.namedParamDef[\"~internal\"].optional) {\n          continue;\n        }\n\n        return false;\n      }\n\n      const urlEncode =\n        pathSegmentDef.namedParamDef[\"~internal\"].valueSerializer.urlEncode ??\n        !pathSegmentDef.namedParamDef[\"~internal\"].trailing;\n\n      let value;\n\n      if (pathSegmentDef.namedParamDef[\"~internal\"].array) {\n        value = pathSegmentMinusLeadingAndTrailing\n          .split(arraySeparator)\n          .map((part) => {\n            return pathSegmentDef.namedParamDef?.[\n              \"~internal\"\n            ].valueSerializer.parse(\n              urlEncode ? decodeURIComponent(part) : part\n            );\n          });\n\n        if (value.some((part) => part === noMatch)) {\n          return false;\n        }\n      } else {\n        value = pathSegmentDef.namedParamDef[\"~internal\"].valueSerializer.parse(\n          urlEncode\n            ? decodeURIComponent(pathSegmentMinusLeadingAndTrailing)\n            : pathSegmentMinusLeadingAndTrailing\n        );\n\n        if (value === noMatch) {\n          return false;\n        }\n      }\n\n      if (\n        pathSegmentDef.namedParamDef[\"~internal\"].trailing &&\n        pathHasTrailingSlash &&\n        pathSegmentDef.trailing === \"\"\n      ) {\n        value = `${value}/`;\n      }\n\n      params[pathSegmentDef.namedParamDef.paramName] = value;\n\n      if (pathSegmentDef.namedParamDef[\"~internal\"].trailing) {\n        break;\n      }\n    }\n\n    return { params, numExtraneousParams: 0 };\n  }\n}\n","import { UmbrellaParamDefCollection } from \"./types\";\nimport { noMatch } from \"./noMatch\";\n\nexport function getObjectMatch({\n  object,\n  paramDefs,\n  urlEncodeDefault,\n  arraySeparator,\n}: {\n  object: Record<string, string | null>;\n  paramDefs: UmbrellaParamDefCollection;\n  urlEncodeDefault: boolean;\n  arraySeparator: string;\n}) {\n  const params: Record<string, unknown> = {};\n\n  const namedParamDefs = Object.keys(paramDefs).map((name) => {\n    return { name, ...paramDefs[name] };\n  });\n\n  const extraneousParams = { ...object };\n\n  for (const paramDef of namedParamDefs) {\n    let raw = object[paramDef.name];\n    delete extraneousParams[paramDef.name];\n\n    if (raw === undefined) {\n      if (paramDef[\"~internal\"].optional) {\n        continue;\n      }\n\n      return false;\n    }\n\n    let value;\n\n    if (raw === null) {\n      if (paramDef[\"~internal\"].array) {\n        value = [];\n      } else if (paramDef[\"~internal\"].optional) {\n        continue;\n      } else {\n        return false;\n      }\n    } else if (paramDef[\"~internal\"].array) {\n      value = raw.split(arraySeparator).map((part) => {\n        return paramDef[\"~internal\"].valueSerializer.parse(\n          paramDef[\"~internal\"].valueSerializer.urlEncode ?? urlEncodeDefault\n            ? decodeURIComponent(part)\n            : part\n        );\n      });\n\n      if (value.some((part) => part === noMatch)) {\n        if (paramDef[\"~internal\"].optional) {\n          continue;\n        }\n\n        return false;\n      }\n    } else {\n      value = paramDef[\"~internal\"].valueSerializer.parse(\n        paramDef[\"~internal\"].valueSerializer.urlEncode ?? urlEncodeDefault\n          ? decodeURIComponent(raw)\n          : raw\n      );\n\n      if (value === noMatch) {\n        if (paramDef[\"~internal\"].optional) {\n          continue;\n        }\n\n        return false;\n      }\n    }\n\n    params[paramDef.name] = value;\n  }\n\n  return { params, numExtraneousParams: Object.keys(extraneousParams).length };\n}\n","import { ParamDefCollection } from \"./types\";\nimport { getObjectMatch } from \"./getObjectMatch\";\n\nexport function getStateMatch(\n  state: Record<string, string> | undefined,\n  paramDefs: ParamDefCollection<\"state\">,\n  arraySeparator: string\n) {\n  return getObjectMatch({\n    object: state ?? {},\n    paramDefs,\n    urlEncodeDefault: false,\n    arraySeparator,\n  });\n}\n","import { getObjectMatch } from \"./getObjectMatch\";\nimport { ParamDefCollection, QueryStringSerializer } from \"./types\";\nimport { assert } from \"./assert\";\n\nexport function getQueryMatch(\n  query: string | undefined,\n  paramDefs: ParamDefCollection<\"query\">,\n  queryStringSerializer: QueryStringSerializer,\n  arraySeparator: string\n) {\n  let object: Record<string, string | null> = {};\n\n  if (query) {\n    object = queryStringSerializer.parse(query);\n\n    if (__DEV__) {\n      assert(\"[QueryStringSerializer].parse\", [\n        assert.collectionOfType(\n          [\"string\", \"null\"],\n          \"parsedQueryString\",\n          object\n        ),\n      ]);\n    }\n  }\n\n  return getObjectMatch({\n    object,\n    paramDefs,\n    urlEncodeDefault: true,\n    arraySeparator,\n  });\n}\n","import {\n  RouterLocation,\n  PathDef,\n  QueryStringSerializer,\n  UmbrellaParamDefCollection,\n} from \"./types\";\nimport { getPathMatch } from \"./getPathMatch\";\nimport { getStateMatch } from \"./getStateMatch\";\nimport { getQueryMatch } from \"./getQueryMatch\";\nimport { getParamDefsOfType } from \"./getParamDefsOfType\";\n\nexport function createMatcher({\n  pathDefs,\n  params,\n}: {\n  pathDefs: PathDef[];\n  params: UmbrellaParamDefCollection;\n}) {\n  const queryParamDefCollection = getParamDefsOfType(\"query\", params);\n  const stateParamDefCollection = getParamDefsOfType(\"state\", params);\n\n  const defaultParams: Record<string, unknown> = {};\n\n  Object.keys(params).forEach((paramName) => {\n    const param = params[paramName];\n    if (param[\"~internal\"].default === undefined) {\n      return;\n    }\n    defaultParams[paramName] = param[\"~internal\"].default;\n  });\n\n  return ({\n    routerLocation,\n    arraySeparator,\n    queryStringSerializer,\n  }: {\n    routerLocation: RouterLocation;\n    queryStringSerializer: QueryStringSerializer;\n    arraySeparator: string;\n  }) => {\n    if (routerLocation.path === undefined) {\n      return false;\n    }\n\n    const pathMatch = getPathMatch({\n      path: routerLocation.path,\n      pathDefs,\n      arraySeparator,\n    });\n\n    if (pathMatch === false) {\n      return false;\n    }\n\n    const queryMatch = getQueryMatch(\n      routerLocation.query,\n      queryParamDefCollection,\n      queryStringSerializer,\n      arraySeparator\n    );\n    if (queryMatch === false) {\n      return false;\n    }\n\n    const stateMatch = getStateMatch(\n      routerLocation.state,\n      stateParamDefCollection,\n      arraySeparator\n    );\n    if (stateMatch === false) {\n      return false;\n    }\n\n    return {\n      primaryPath: pathMatch.primaryPath,\n      params: {\n        ...defaultParams,\n        ...pathMatch.params,\n        ...queryMatch.params,\n        ...stateMatch.params,\n      },\n      numExtraneousParams:\n        pathMatch.numExtraneousParams +\n        queryMatch.numExtraneousParams +\n        stateMatch.numExtraneousParams,\n    };\n  };\n}\n","import { ClickEvent } from \"./types\";\n\nexport function preventDefaultLinkClickBehavior(event: any = {}) {\n  const e = event as ClickEvent;\n  const isModifiedEvent = !!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey);\n\n  const isSelfTarget =\n    !e.target || !e.target.target || e.target.target === \"_self\";\n\n  if (\n    isSelfTarget && // Ignore everything but links with target self\n    !e.defaultPrevented && // onClick prevented default\n    e.button === 0 && // ignore everything but left clicks\n    !isModifiedEvent // ignore clicks with modifier keys\n  ) {\n    if (e && e.preventDefault) {\n      e.preventDefault();\n    }\n\n    return true;\n  }\n\n  return false;\n}\n","import { UmbrellaRoute, RouterLocation, RouterContext } from \"./types\";\nimport { preventDefaultLinkClickBehavior } from \"./preventDefaultLinkClickBehavior\";\nimport { stringUtils } from \"./stringUtils\";\n\nconst { startsWith } = stringUtils;\n\nexport function buildRoute({\n  routeName,\n  params,\n  location,\n  routerContext,\n}: {\n  routeName: string | false;\n  params: Record<string, unknown>;\n  location: RouterLocation;\n  routerContext: RouterContext;\n}): UmbrellaRoute {\n  const { navigate, history } = routerContext;\n\n  let href = history.createHref({\n    pathname: routeName === false ? location.fullPath : location.path,\n    search: location.query ? \"?\" + location.query : \"\",\n  });\n\n  if (startsWith(href, \"#\")) {\n    href = \"/\" + href;\n  }\n\n  if (routeName !== false && routerContext.baseUrl !== \"/\") {\n    href = routerContext.baseUrl + href;\n  }\n\n  const route: UmbrellaRoute = {\n    name: routeName,\n    params,\n    href,\n    link: {\n      href,\n      onClick: (event) => {\n        if (preventDefaultLinkClickBehavior(event)) {\n          return route.push();\n        }\n      },\n    },\n    action: null,\n    push: () => navigate({ ...route, action: \"push\" }, true),\n    replace: () => navigate({ ...route, action: \"replace\" }, true),\n  };\n\n  return route;\n}\n","import { UmbrellaRouteDef, UmbrellaRouteBuilder, RouterContext } from \"./types\";\nimport { buildPathDefs } from \"./buildPathDefs\";\nimport { getParamDefsOfType } from \"./getParamDefsOfType\";\nimport { createLocation } from \"./createLocation\";\nimport { createMatcher } from \"./createMatcher\";\nimport { assert } from \"./assert\";\nimport { buildRoute } from \"./buildRoute\";\nimport { TypeRouteError } from \"./TypeRouteError\";\n\nexport function createRouteBuilder(\n  routeName: string,\n  routeDef: UmbrellaRouteDef,\n  getRouterContext: () => RouterContext\n): UmbrellaRouteBuilder {\n  const pathDefs = buildPathDefs(\n    routeName,\n    getParamDefsOfType(\"path\", routeDef[\"~internal\"].params),\n    routeDef[\"~internal\"].path\n  );\n\n  const build: UmbrellaRouteBuilder = function (\n    params: Record<string, unknown> = {}\n  ) {\n    if (__DEV__) {\n      assert(`routes.${routeName}`, [\n        assert.numArgs([].slice.call(arguments), 0, 1),\n        assert.type(\"object\", \"params\", params),\n      ]);\n\n      for (const paramKey in params) {\n        if (!(paramKey in routeDef[\"~internal\"].params)) {\n          throw TypeRouteError.Encountered_unexpected_parameter_when_building_route.create(\n            {\n              routeName,\n              unexpectedParameterName: paramKey,\n              allowedParameterNames: Object.keys(routeDef[\"~internal\"].params),\n            }\n          );\n        }\n      }\n\n      for (const paramKey in routeDef[\"~internal\"].params) {\n        const value = params[paramKey];\n        const paramDef = routeDef[\"~internal\"].params[paramKey][\"~internal\"];\n\n        if (value === undefined) {\n          if (!paramDef.optional) {\n            throw TypeRouteError.Missing_required_parameter_when_building_route.create(\n              {\n                routeName,\n                missingParameterName: paramKey,\n              }\n            );\n          }\n\n          continue;\n        }\n      }\n    }\n\n    const routerContext = getRouterContext();\n\n    const { arraySeparator, queryStringSerializer, baseUrl } = routerContext;\n\n    const paramsWithDefault = { ...params };\n\n    Object.keys(routeDef[\"~internal\"].params).forEach((paramName) => {\n      const paramDef = routeDef[\"~internal\"].params[paramName];\n\n      if (\n        paramsWithDefault[paramName] === undefined &&\n        paramDef[\"~internal\"].default !== undefined\n      ) {\n        paramsWithDefault[paramName] = paramDef[\"~internal\"].default;\n      }\n    });\n\n    const location = createLocation({\n      paramCollection: params,\n      paramDefCollection: routeDef[\"~internal\"].params,\n      arraySeparator,\n      queryStringSerializer,\n      pathDefs,\n      baseUrl,\n    });\n\n    return buildRoute({\n      routeName,\n      params: paramsWithDefault,\n      location,\n      routerContext,\n    }) as any;\n  };\n\n  Object.defineProperty(build, \"name\", { value: routeName });\n\n  build[\"~internal\"] = {\n    type: \"RouteBuilder\",\n    match: createMatcher({\n      pathDefs,\n      params: routeDef[\"~internal\"].params,\n    }) as any,\n    pathDefs,\n    Route: null as any,\n  };\n\n  return build;\n}\n","import { QueryStringSerializer, QueryStringArrayFormat } from \"./types\";\nimport { stringUtils } from \"./stringUtils\";\n\nexport function createQueryStringSerializer(\n  args: {\n    queryStringArrayFormat?: QueryStringArrayFormat;\n    arraySeparator?: string;\n  } = {}\n): QueryStringSerializer {\n  const queryStringArrayFormat =\n    args.queryStringArrayFormat ?? \"singleKeyWithBracket\";\n  const arraySeparator = args.arraySeparator ?? \",\";\n\n  const multiKey =\n    queryStringArrayFormat === \"multiKey\" ||\n    queryStringArrayFormat === \"multiKeyWithBracket\";\n\n  const arrayKeySuffix =\n    queryStringArrayFormat === \"multiKey\" ||\n    queryStringArrayFormat === \"singleKey\"\n      ? \"\"\n      : \"[]\";\n\n  return {\n    parse: (raw) => {\n      const queryParams: Record<string, string | null> = {};\n\n      for (const part of raw.split(\"&\")) {\n        const [rawParamName, rawParamValue, ...rest] = part.split(\"=\");\n\n        if (rawParamName === undefined || rest.length > 0) {\n          continue;\n        }\n\n        const key = decodeURIComponent(\n          stringUtils.endsWith(rawParamName, arrayKeySuffix)\n            ? rawParamName.slice(0, rawParamName.length - arrayKeySuffix.length)\n            : rawParamName\n        );\n\n        if (rawParamValue === undefined) {\n          queryParams[key] = null;\n        } else if (queryParams[key] && multiKey) {\n          queryParams[key] += `${arraySeparator}${rawParamValue}`;\n        } else {\n          queryParams[key] = rawParamValue;\n        }\n      }\n\n      return queryParams;\n    },\n\n    stringify: (queryParams) => {\n      return Object.keys(queryParams)\n        .map((name) => {\n          const encodedName = encodeURIComponent(name);\n          const key = queryParams[name].array\n            ? `${encodedName}${arrayKeySuffix}`\n            : encodedName;\n          const value = queryParams[name].value;\n\n          if (value === null) {\n            return key;\n          }\n\n          if (queryParams[name].array && multiKey) {\n            const valueParts = value.split(arraySeparator);\n            return valueParts.map((part) => `${key}=${part}`).join(\"&\");\n          }\n\n          return `${key}=${value}`;\n        })\n        .join(\"&\");\n    },\n  };\n}\n","import { RouterLocation, UmbrellaRoute, Match, RouterContext } from \"./types\";\nimport { buildRoute } from \"./buildRoute\";\n\nexport function getMatchingRoute(\n  location: RouterLocation,\n  routerContext: RouterContext\n): { route: UmbrellaRoute; primaryPath: boolean } {\n  const { getRoutes, queryStringSerializer, arraySeparator } = routerContext;\n\n  const routes = getRoutes();\n\n  let nonExactMatch: (Match & { routeName: string }) | false = false;\n\n  for (const routeName in routes) {\n    const match = routes[routeName][\"~internal\"].match({\n      routerLocation: location,\n      queryStringSerializer,\n      arraySeparator,\n    });\n\n    if (match === false) {\n      continue;\n    }\n\n    if (match.numExtraneousParams === 0) {\n      return {\n        route: routes[routeName](match.params),\n        primaryPath: match.primaryPath,\n      };\n    }\n\n    if (\n      nonExactMatch === false ||\n      match.numExtraneousParams < nonExactMatch.numExtraneousParams\n    ) {\n      nonExactMatch = { ...match, routeName };\n    }\n  }\n\n  if (nonExactMatch) {\n    return {\n      route: routes[nonExactMatch.routeName](nonExactMatch.params),\n      primaryPath: nonExactMatch.primaryPath,\n    };\n  }\n\n  return {\n    route: buildRoute({\n      routeName: false,\n      params: {},\n      location,\n      routerContext,\n    }),\n    primaryPath: true,\n  };\n}\n","import { RouterLocation } from \"./types\";\nimport { Location as HistoryLocation } from \"history\";\nimport { stringUtils } from \"./stringUtils\";\n\nconst { startsWith } = stringUtils;\n\nexport function convertToRouterLocationFromHistoryLocation(\n  rawLocation: Pick<HistoryLocation, \"pathname\" | \"search\" | \"state\">,\n  baseUrl: string\n): RouterLocation {\n  return {\n    fullPath: rawLocation.pathname,\n    path: startsWith(rawLocation.pathname, baseUrl)\n      ? baseUrl !== \"/\"\n        ? rawLocation.pathname.replace(baseUrl, \"\")\n        : rawLocation.pathname\n      : undefined,\n    query: rawLocation.search\n      ? startsWith(rawLocation.search, \"?\")\n        ? rawLocation.search.slice(1)\n        : rawLocation.search\n      : undefined,\n    state:\n      typeof rawLocation.state === \"object\" && rawLocation.state !== null\n        ? (rawLocation.state as { state?: Record<string, string> }).state\n        : undefined,\n  };\n}\n","import { RouterContext } from \"./types\";\nimport { convertToRouterLocationFromHistoryLocation } from \"./convertToRouterLocationFromHistoryLocation\";\nimport { getMatchingRoute } from \"./getMatchingRoute\";\nimport { stringUtils } from \"./stringUtils\";\n\nconst { splitFirst } = stringUtils;\n\nexport function getRouteByHref(\n  href: string,\n  state: any,\n  routerContext: RouterContext\n) {\n  const [pathname, search] = splitFirst(href, \"?\");\n\n  const location = convertToRouterLocationFromHistoryLocation(\n    {\n      pathname,\n      search,\n      state,\n    },\n    routerContext.baseUrl\n  );\n\n  return getMatchingRoute(location, routerContext);\n}\n","import { UmbrellaNavigationHandler } from \"./types\";\n\nexport function createNavigationHandlerManager({\n  startListening,\n  stopListening,\n}: {\n  startListening: () => void;\n  stopListening: () => void;\n}) {\n  const handlerIdList: {\n    handler: UmbrellaNavigationHandler;\n    id: number;\n  }[] = [];\n  let idCounter = 0;\n\n  return { add, getHandlers };\n\n  function getHandlers() {\n    return handlerIdList.map(({ handler }) => handler);\n  }\n\n  function add(handler: UmbrellaNavigationHandler) {\n    const id = idCounter++;\n    handlerIdList.push({ id, handler });\n\n    if (handlerIdList.length === 1) {\n      startListening();\n    }\n\n    return remove;\n\n    function remove() {\n      const index = handlerIdList.map(({ id }) => id).indexOf(id);\n      if (index >= 0) {\n        handlerIdList.splice(index, 1);\n        if (handlerIdList.length === 0) {\n          stopListening();\n        }\n      }\n    }\n  }\n}\n","import { UmbrellaRoute } from \"./types\";\n\nexport function attemptScrollToTop(\n  route: UmbrellaRoute,\n  scrollToTop: boolean | undefined\n) {\n  if (\n    route.action === \"push\" &&\n    typeof window === \"object\" &&\n    window !== null &&\n    typeof window.scroll === \"function\" &&\n    scrollToTop !== false &&\n    typeof navigator === \"object\" &&\n    navigator !== null &&\n    typeof navigator.userAgent === \"string\" &&\n    !(\n      navigator.userAgent.indexOf(\"Node.js\") > 0 ||\n      navigator.userAgent.indexOf(\"jsdom\") > 0\n    )\n  ) {\n    try {\n      window.scroll(0, 0);\n    } catch {}\n  }\n}\n","import { UmbrellaRoute, UmbrellaRouteDefCollection } from \"./types\";\n\nexport function serializeStateParams(\n  route: UmbrellaRoute,\n  routeDefs: UmbrellaRouteDefCollection\n) {\n  const state: Record<string, string> = {};\n\n  if (route.name) {\n    const sortedParams = Object.keys(route.params).sort();\n    for (const paramName of sortedParams) {\n      const paramDef =\n        routeDefs[route.name][\"~internal\"].params[paramName][\"~internal\"];\n\n      if (paramDef.kind === \"state\") {\n        const value = route.params[paramName];\n        state[paramName] = paramDef.valueSerializer.stringify(value);\n      }\n    }\n  }\n\n  return state;\n}\n","import {\n  CoreRouter,\n  Action,\n  SessionOpts,\n  UmbrellaRouteBuilder,\n  UmbrellaCoreRouter,\n  UmbrellaRoute,\n  UmbrellaRouteDefCollection,\n  RouterContext,\n  UmbrellaBlocker,\n  RouterOpts,\n} from \"./types\";\nimport { createRouteBuilder } from \"./createRouteBuilder\";\nimport {\n  createBrowserHistory,\n  History,\n  createMemoryHistory,\n  createHashHistory,\n} from \"history\";\nimport { createQueryStringSerializer } from \"./createQueryStringSerializer\";\nimport { assert } from \"./assert\";\nimport { TypeRouteError } from \"./TypeRouteError\";\nimport { getMatchingRoute } from \"./getMatchingRoute\";\nimport { convertToRouterLocationFromHistoryLocation } from \"./convertToRouterLocationFromHistoryLocation\";\nimport { getRouteByHref } from \"./getRouteByHref\";\nimport { createNavigationHandlerManager } from \"./createNavigationHandlerManager\";\nimport { stringUtils } from \"./stringUtils\";\nimport { attemptScrollToTop } from \"./attemptScrollToTop\";\nimport { serializeStateParams } from \"./serializeStateParams\";\n\nconst { startsWith, splitFirst } = stringUtils;\n\nexport function createRouter<\n  TRouteDefCollection extends { [routeName: string]: any }\n>(routeDefs: TRouteDefCollection): CoreRouter<TRouteDefCollection>;\nexport function createRouter<\n  TRouteDefCollection extends { [routeName: string]: any }\n>(\n  opts: RouterOpts,\n  routeDefs: TRouteDefCollection\n): CoreRouter<TRouteDefCollection>;\nexport function createRouter(...args: any[]): UmbrellaCoreRouter {\n  const { routeDefs, opts } = parseArgs(args);\n\n  const navigationHandlerManager = createNavigationHandlerManager({\n    startListening: () => {\n      unlisten = history.listen((update) => {\n        if (skipNextEnvironmentTriggeredNavigation) {\n          skipNextEnvironmentTriggeredNavigation = false;\n          return;\n        }\n\n        const location = convertToRouterLocationFromHistoryLocation(\n          update.location,\n          baseUrl\n        );\n        const action = update.action.toLowerCase() as Action;\n        const { route, primaryPath } = getMatchingRoute(\n          location,\n          getRouterContext()\n        );\n\n        handleNavigation({ ...route, action }, primaryPath);\n      });\n    },\n    stopListening: () => unlisten?.(),\n  });\n\n  const baseUrl = opts.baseUrl ?? \"/\";\n  const arraySeparator = opts.arrayFormat?.separator ?? \",\";\n  const queryStringSerializer =\n    opts.queryStringSerializer ??\n    createQueryStringSerializer({\n      queryStringArrayFormat: opts.arrayFormat?.queryString,\n      arraySeparator,\n    });\n\n  let history: History;\n  let unlisten: (() => void) | undefined;\n  let skipNextEnvironmentTriggeredNavigation = false;\n  let skipHandlingNextApplicationTriggeredNavigation = false;\n  let initialRoute: UmbrellaRoute | null = null;\n  let previousRoute: UmbrellaRoute | null = null;\n  let blockerCollection: UmbrellaBlocker[] = [];\n\n  applySessionOpts(opts.session);\n\n  const routes = createRouteBuilderCollection(getRouterContext);\n\n  const router: UmbrellaCoreRouter = {\n    routes,\n    session: {\n      push(href, state) {\n        if (__DEV__) {\n          assert(\"[RouterSessionHistory].push\", [\n            assert.numArgs([].slice.call(arguments), 1, 2),\n            assert.type(\"string\", \"href\", href),\n            assert.type([\"object\", \"undefined\"], \"state\", state),\n          ]);\n        }\n\n        const { route, primaryPath } = getRouteByHref(\n          href,\n          state,\n          getRouterContext()\n        );\n\n        return navigate({ ...route, action: \"push\" }, primaryPath);\n      },\n      replace(href, state) {\n        if (__DEV__) {\n          assert(\"[RouterSessionHistory].replace\", [\n            assert.numArgs([].slice.call(arguments), 1, 2),\n            assert.type(\"string\", \"href\", href),\n            assert.type([\"object\", \"undefined\"], \"state\", state),\n          ]);\n        }\n\n        const { route, primaryPath } = getRouteByHref(\n          href,\n          state,\n          getRouterContext()\n        );\n\n        return navigate({ ...route, action: \"replace\" }, primaryPath);\n      },\n      back(amount = 1) {\n        if (__DEV__) {\n          assert(\"[RouterSessionHistory].back\", [\n            assert.numArgs([].slice.call(arguments), 0, 1),\n            assert.type(\"number\", \"amount\", amount),\n          ]);\n        }\n\n        history.go(-amount);\n      },\n      forward(amount = 1) {\n        if (__DEV__) {\n          assert(\"[RouterSessionHistory].forward\", [\n            assert.numArgs([].slice.call(arguments), 0, 1),\n            assert.type(\"number\", \"amount\", amount),\n          ]);\n        }\n\n        history.go(amount);\n      },\n      getInitialRoute() {\n        if (__DEV__) {\n          assert(\"[RouterSessionHistory].getInitialRoute\", [\n            assert.numArgs([].slice.call(arguments), 0),\n          ]);\n        }\n\n        if (!initialRoute) {\n          let result = getMatchingRoute(\n            convertToRouterLocationFromHistoryLocation(\n              history.location,\n              baseUrl\n            ),\n            getRouterContext()\n          );\n\n          if (!result.primaryPath) {\n            skipHandlingNextApplicationTriggeredNavigation = true;\n            result.route.replace();\n            result = getMatchingRoute(\n              convertToRouterLocationFromHistoryLocation(\n                history.location,\n                baseUrl\n              ),\n              getRouterContext()\n            );\n          }\n          initialRoute = result.route;\n        }\n\n        return initialRoute;\n      },\n      reset(session) {\n        if (__DEV__) {\n          assert(\"[RouterSessionHistory].reset\", [\n            assert.numArgs([].slice.call(arguments), 1),\n            assert.type(\"object\", \"session\", session),\n          ]);\n        }\n\n        return applySessionOpts(session);\n      },\n      block(blocker) {\n        blockerCollection.push(blocker);\n\n        const unblock = history.block((update) => {\n          const { route } = getMatchingRoute(\n            convertToRouterLocationFromHistoryLocation(\n              update.location,\n              baseUrl\n            ),\n            getRouterContext()\n          );\n\n          const action = update.action.toLowerCase() as Action;\n\n          blocker({ route: { ...route, action }, retry: update.retry });\n        });\n\n        return () => {\n          blockerCollection.splice(\n            blockerCollection.findIndex((item) => item === blocker),\n            1\n          );\n\n          unblock();\n        };\n      },\n      listen: (handler) => navigationHandlerManager.add(handler),\n    },\n  };\n\n  return router;\n\n  function applySessionOpts(\n    sessionOpts: SessionOpts = {\n      type:\n        typeof window !== \"undefined\" && typeof window.document !== \"undefined\"\n          ? \"browser\"\n          : \"memory\",\n    }\n  ) {\n    initialRoute = null;\n    if (sessionOpts.type === \"memory\") {\n      history = createMemoryHistory({\n        initialEntries: sessionOpts.initialEntries,\n        initialIndex: sessionOpts.initialIndex,\n      });\n    } else if (sessionOpts.type === \"hash\") {\n      history = createHashHistory({\n        window: sessionOpts.window,\n      });\n    } else {\n      history = createBrowserHistory({\n        window: sessionOpts.window,\n      });\n    }\n  }\n\n  function navigate(route: UmbrellaRoute, primaryPath: boolean) {\n    if (blockerCollection.length > 0) {\n      blockerCollection.forEach((blocker) => {\n        blocker({\n          route,\n          retry: () => {\n            route[route.action === \"push\" ? \"push\" : \"replace\"]();\n          },\n        });\n      });\n\n      return;\n    }\n\n    const state = serializeStateParams(route, routeDefs);\n\n    if (\n      previousRoute?.href === route.href &&\n      JSON.stringify(serializeStateParams(previousRoute, routeDefs)) ===\n        JSON.stringify(state)\n    ) {\n      return;\n    }\n\n    if (skipHandlingNextApplicationTriggeredNavigation) {\n      skipHandlingNextApplicationTriggeredNavigation = false;\n    } else {\n      handleNavigation(route, primaryPath);\n    }\n\n    skipNextEnvironmentTriggeredNavigation = true;\n\n    const [pathname, search] = splitFirst(route.href, \"?\");\n\n    history[route.action === \"replace\" ? \"replace\" : \"push\"](\n      {\n        pathname,\n        search: search ? `?${search}` : \"\",\n        hash: \"\",\n      },\n      state ? { state } : undefined\n    );\n  }\n\n  function handleNavigation(route: UmbrellaRoute, primaryPath: boolean) {\n    if (!primaryPath) {\n      route.replace();\n      return;\n    }\n\n    for (const handler of navigationHandlerManager.getHandlers()) {\n      handler(route);\n    }\n\n    attemptScrollToTop(route, opts.scrollToTop);\n\n    previousRoute = route;\n  }\n\n  function getRouterContext(): RouterContext {\n    return {\n      queryStringSerializer,\n      arraySeparator,\n      navigate,\n      history,\n      routeDefs,\n      getRoutes: () => routes,\n      baseUrl,\n    };\n  }\n}\n\nexport function parseArgs(args: any[]) {\n  const routeDefs: UmbrellaRouteDefCollection =\n    args.length === 1 ? args[0] : args[1];\n  const opts: RouterOpts = args.length === 1 ? {} : args[0];\n\n  if (__DEV__) {\n    assert(\"createRouter\", [\n      assert.numArgs(args, 1, 2),\n      assert.collectionOfType(\"RouteDef\", \"routeDefs\", routeDefs),\n      assert.type(\"object\", \"opts\", opts),\n    ]);\n\n    if (opts.arrayFormat?.queryString && opts.queryStringSerializer) {\n      throw TypeRouteError.Query_string_array_format_and_custom_query_string_serializer_may_not_both_be_provided.create();\n    }\n\n    if (typeof opts.baseUrl === \"string\") {\n      if (!startsWith(opts.baseUrl, \"/\")) {\n        throw TypeRouteError.Base_url_must_start_with_a_forward_slash.create(\n          opts.baseUrl\n        );\n      }\n\n      if (\n        opts.baseUrl\n          .split(\"/\")\n          .some((part) => encodeURIComponent(part) !== part)\n      ) {\n        throw TypeRouteError.Base_url_must_not_contain_any_characters_that_must_be_url_encoded.create(\n          opts.baseUrl\n        );\n      }\n    }\n  }\n\n  return { routeDefs, opts };\n}\n\nfunction createRouteBuilderCollection(getRouterContext: () => RouterContext) {\n  const routes: Record<string, UmbrellaRouteBuilder> = {};\n  const { routeDefs } = getRouterContext();\n\n  for (const routeName in routeDefs) {\n    const routeDef = routeDefs[routeName];\n    routes[routeName] = createRouteBuilder(\n      routeName,\n      routeDef,\n      getRouterContext\n    );\n  }\n\n  return routes;\n}\n","import {\n  PathFn,\n  UmbrellaParamDefCollection,\n  RouteDef,\n  UmbrellaRouteDef,\n} from \"./types\";\nimport { TypeRouteError } from \"./TypeRouteError\";\nimport { assert } from \"./assert\";\nimport { asArray } from \"./asArray\";\n\nexport function defineRoute<TParamDefCollection>(\n  params: TParamDefCollection,\n  path: PathFn<TParamDefCollection>\n): RouteDef<TParamDefCollection>;\nexport function defineRoute(path: string | string[]): RouteDef<{}>;\nexport function defineRoute(...args: any[]): UmbrellaRouteDef {\n  assertDefineRouteOrExtendArgs(\"defineRoute\", args);\n\n  const parent = parseArgs(args);\n\n  const routeDef: UmbrellaRouteDef = {\n    \"~internal\": {\n      type: \"RouteDef\",\n      params: parent.params,\n      path: parent.path,\n    },\n    extend(...args: any[]) {\n      assertDefineRouteOrExtendArgs(\"extend\", args);\n\n      const { params, path } = parseArgs(args);\n\n      const parentParamNames = Object.keys(parent.params);\n      const extensionParamNames = Object.keys(params);\n\n      const duplicateParamNames = parentParamNames.filter(\n        (name) => extensionParamNames.indexOf(name) >= 0\n      );\n\n      if (__DEV__) {\n        if (duplicateParamNames.length > 0) {\n          throw TypeRouteError.Extension_route_definition_parameter_names_may_not_be_the_same_as_base_route_definition_parameter_names.create(\n            duplicateParamNames\n          );\n        }\n      }\n\n      return defineRoute(\n        {\n          ...params,\n          ...parent.params,\n        },\n        (x) => {\n          const parentPathArray = asArray(\n            parent.path(filter(parentParamNames))\n          );\n          const childPathArray = asArray(path(filter(extensionParamNames)));\n\n          return ([] as string[]).concat(\n            ...parentPathArray.map((parentPath) =>\n              childPathArray.map((childPath) => {\n                if (parentPath === \"/\") {\n                  return childPath;\n                }\n\n                return parentPath + (childPath === \"/\" ? \"\" : childPath);\n              })\n            )\n          );\n\n          function filter(allowedKeys: string[]) {\n            const filteredX: Record<string, string> = {};\n\n            allowedKeys.forEach((key) => {\n              filteredX[key] = (x as Record<string, string>)[key];\n            });\n\n            return filteredX;\n          }\n        }\n      );\n    },\n  };\n\n  return routeDef;\n}\n\nfunction assertDefineRouteOrExtendArgs(functionName: string, args: any[]) {\n  if (__DEV__) {\n    if (args.length === 1) {\n      if (Array.isArray(args[0])) {\n        assert(functionName, [assert.arrayOfType(\"string\", \"path\", args[0])]);\n      } else {\n        assert(functionName, [assert.type(\"string\", \"path\", args[0])]);\n      }\n    } else {\n      assert(functionName, [\n        assert.numArgs(args, 1, 2),\n        assert.collectionOfType(\"ParamDef\", \"params\", args[0]),\n        assert.type(\"function\", \"path\", args[1]),\n      ]);\n    }\n  }\n}\n\nfunction parseArgs(args: any[]): {\n  params: UmbrellaParamDefCollection;\n  path: PathFn<UmbrellaParamDefCollection>;\n} {\n  return args.length === 1\n    ? {\n        params: {},\n        path: () => args[0],\n      }\n    : {\n        params: args[0],\n        path: args[1],\n      };\n}\n","import { noMatch } from \"./noMatch\";\nimport { ValueSerializer, ParamDefKind, ParamDef, ParamValue } from \"./types\";\nimport { assert } from \"./assert\";\n\nconst boolean: ValueSerializer<boolean> = {\n  id: \"boolean\",\n  parse: (raw) => (raw === \"true\" ? true : raw === \"false\" ? false : noMatch),\n  stringify: (value) => (value ? \"true\" : \"false\"),\n};\n\nconst number: ValueSerializer<number> = {\n  id: \"number\",\n  parse: (raw) => {\n    if (!isNumeric(raw)) {\n      return noMatch;\n    }\n\n    return parseFloat(raw);\n  },\n  stringify: (value) => value.toString(),\n};\n\nfunction isNumeric(value: string) {\n  return !isNaN(parseFloat(value)) && /^-?\\d*\\.?\\d*$/.test(value);\n}\n\nconst string: ValueSerializer<string> = {\n  id: \"string\",\n  parse: (raw) => raw,\n  stringify: (value) => value,\n};\n\nconst json = <TValue = unknown>() => {\n  const valueSerializer: ValueSerializer<TValue> = {\n    id: \"json\",\n    parse: (raw) => {\n      let value: TValue;\n\n      try {\n        value = JSON.parse(raw);\n      } catch {\n        return noMatch;\n      }\n\n      return value;\n    },\n    stringify: (value) => JSON.stringify(value),\n  };\n\n  return valueSerializer;\n};\n\nexport const param = {\n  path: {\n    ...getParamDefKindSection(\"path\", false),\n    trailing: getParamDefKindSection(\"path\", true),\n  },\n  query: getParamDefKindSection(\"query\", false),\n  state: getParamDefKindSection(\"state\", false),\n};\n\nfunction getParamDefKindSection<\n  TKind extends ParamDefKind,\n  TTrailing extends boolean\n>(kind: TKind, trailing: TTrailing) {\n  return {\n    ...getParamDefOptionalitySection(false, false),\n    array: getParamDefOptionalitySection(false, true),\n    optional: {\n      ...getParamDefOptionalitySection(true, false),\n      array: getParamDefOptionalitySection(true, true),\n    },\n  };\n\n  function getParamDefOptionalitySection<\n    TOptional extends boolean,\n    TArray extends boolean\n  >(optional: TOptional, array: TArray) {\n    return {\n      string: getParamDef({\n        \"~internal\": {\n          type: \"ParamDef\",\n          array,\n          kind,\n          optional,\n          valueSerializer: string,\n          trailing,\n          default: undefined as never,\n        },\n      }),\n\n      number: getParamDef({\n        \"~internal\": {\n          type: \"ParamDef\",\n          array,\n          kind,\n          optional,\n          valueSerializer: number,\n          trailing,\n          default: undefined as never,\n        },\n      }),\n\n      boolean: getParamDef({\n        \"~internal\": {\n          type: \"ParamDef\",\n          array,\n          kind,\n          optional,\n          valueSerializer: boolean,\n          trailing,\n          default: undefined as never,\n        },\n      }),\n\n      ofType<TValue = unknown>(\n        valueSerializer: ValueSerializer<TValue> = json<TValue>()\n      ) {\n        if (__DEV__) {\n          assert(\"[ParamDef].ofType\", [\n            assert.numArgs([].slice.call(arguments), 0, 1),\n            assert.type(\"object\", \"valueSerializer\", valueSerializer),\n          ]);\n        }\n\n        return getParamDef({\n          \"~internal\": {\n            type: \"ParamDef\",\n            array,\n            kind,\n            optional,\n            valueSerializer,\n            trailing,\n            default: undefined as never,\n          },\n        });\n      },\n    };\n  }\n\n  type GetParamDefResult<T extends ParamDef<TKind>> =\n    T[\"~internal\"][\"optional\"] extends true\n      ? {\n          [\"~internal\"]: T[\"~internal\"];\n          default(value: ParamValue<T>): {\n            [\"~internal\"]: {\n              type: \"ParamDef\";\n              kind: T[\"~internal\"][\"kind\"];\n              array: T[\"~internal\"][\"array\"];\n              valueSerializer: T[\"~internal\"][\"valueSerializer\"];\n              optional: T[\"~internal\"][\"optional\"];\n              default: ParamValue<T>;\n              trailing: T[\"~internal\"][\"trailing\"];\n            };\n          };\n        }\n      : T;\n\n  function getParamDef<T extends ParamDef<TKind>>({\n    \"~internal\": internal,\n  }: T): GetParamDefResult<T> {\n    if (!internal.optional) {\n      return { \"~internal\": internal } as any;\n    }\n\n    return {\n      \"~internal\": internal,\n      default(value: any) {\n        if (__DEV__) {\n          assert(\"[ParamDef].default\", [\n            assert.numArgs([].slice.call(arguments), 1),\n          ]);\n        }\n\n        return {\n          \"~internal\": { ...internal, default: value },\n        };\n      },\n    } as any;\n  }\n}\n","import { RouteGroup, UmbrellaRoute, UmbrellaRouteBuilder } from \"./types\";\nimport { assert } from \"./assert\";\n\nexport function createGroup<T extends any[]>(groupItems: T): RouteGroup<T> {\n  if (__DEV__) {\n    assert(\"createGroup\", [\n      assert.numArgs([].slice.call(arguments), 1),\n      assert.arrayOfType(\n        [\"RouteGroup\", \"RouteBuilder\"],\n        \"groupItems\",\n        groupItems\n      ),\n    ]);\n  }\n\n  const routeNames: Record<string, true> = {};\n\n  groupItems.forEach((item) => {\n    if (isRouteGroup(item)) {\n      item.routeNames.forEach((name) => {\n        routeNames[name] = true;\n      });\n    } else {\n      routeNames[item.name] = true;\n    }\n  });\n\n  return {\n    \"~internal\": {\n      type: \"RouteGroup\",\n      Route: null as any,\n    },\n    routeNames: Object.keys(routeNames),\n    has(route: UmbrellaRoute): route is UmbrellaRoute {\n      if (__DEV__) {\n        assert(\"[RouteGroup].has\", [\n          assert.numArgs([].slice.call(arguments), 1),\n          assert.type(\"object\", \"route\", route),\n        ]);\n      }\n\n      if (route.name === false) {\n        return false;\n      }\n\n      return !!routeNames[route.name];\n    },\n  };\n}\n\nfunction isRouteGroup(\n  value: RouteGroup | UmbrellaRouteBuilder\n): value is RouteGroup {\n  return !!(value as RouteGroup).routeNames;\n}\n","import {\n  CoreRouter,\n  UmbrellaRouteDefCollection,\n  UmbrellaRoute,\n  RouteDefCollectionRoute,\n  RouterOpts,\n} from \"./types\";\nimport { createRouter as coreCreateRouter, parseArgs } from \"./createRouter\";\nimport { TypeRouteError } from \"./TypeRouteError\";\nimport * as React from \"react\";\nimport { attemptScrollToTop } from \"./attemptScrollToTop\";\n\nif (typeof __DEV__ === \"boolean\" && __DEV__) {\n  const [major, minor] = React.version\n    .split(\".\")\n    .map((value: string) => parseInt(value, 10));\n\n  if (major < 16 || (major === 16 && minor < 8)) {\n    throw TypeRouteError.Invalid_React_version.create(React.version);\n  }\n}\n\nexport { defineRoute } from \"./defineRoute\";\nexport { param } from \"./param\";\nexport { createGroup } from \"./createGroup\";\nexport { noMatch } from \"./noMatch\";\nexport { preventDefaultLinkClickBehavior } from \"./preventDefaultLinkClickBehavior\";\nexport {\n  GetRoute as Route,\n  Link,\n  ValueSerializer,\n  QueryStringSerializer,\n  SessionOpts,\n  RouterOpts,\n} from \"./types\";\n\ntype Router<TRouteDefCollection extends { [routeName: string]: any }> =\n  CoreRouter<TRouteDefCollection> & {\n    /**\n     * React hook for retrieving the current route.\n     *\n     * @see https://zilch.dev/type-route/docs/api-reference/router/use-route\n     */\n    useRoute: () => RouteDefCollectionRoute<TRouteDefCollection>;\n\n    /**\n     * React component which connects React to Type Route and provides the current route to the rest of the application.\n     *\n     * @see https://zilch.dev/type-route/docs/api-reference/router/route-provider\n     */\n    RouteProvider: (props: { children?: any }) => any;\n  };\ntype UmbrellaRouter = Router<UmbrellaRouteDefCollection>;\n\nexport function createRouter<\n  TRouteDefCollection extends { [routeName: string]: any }\n>(routeDefs: TRouteDefCollection): Router<TRouteDefCollection>;\nexport function createRouter<\n  TRouteDefCollection extends { [routeName: string]: any }\n>(\n  opts: RouterOpts,\n  routeDefs: TRouteDefCollection\n): Router<TRouteDefCollection>;\nexport function createRouter(...args: any[]): UmbrellaRouter {\n  const { opts, routeDefs } = parseArgs(args);\n  const router = coreCreateRouter({ ...opts, scrollToTop: false }, routeDefs);\n  const routeContext = React.createContext<UmbrellaRoute | null>(null);\n\n  return {\n    ...router,\n    RouteProvider,\n    useRoute,\n  };\n\n  function RouteProvider(props: { children?: any }) {\n    const [route, setRoute] = React.useState(router.session.getInitialRoute());\n\n    React.useLayoutEffect(() => router.session.listen(setRoute), []);\n\n    React.useEffect(() => {\n      attemptScrollToTop(route, opts.scrollToTop);\n    }, [route]);\n\n    return React.createElement(\n      routeContext.Provider,\n      { value: route },\n      props.children\n    );\n  }\n\n  function useRoute() {\n    const route = React.useContext(routeContext);\n\n    if (__DEV__) {\n      if (route === null) {\n        throw TypeRouteError.App_should_be_wrapped_in_a_RouteProvider_component.create();\n      }\n    }\n\n    return route!;\n  }\n}\n"],"names":["typeOf","value","Array","isArray","getBuildPathDefRouteNameMessage","routeName","getBuildPathDefErrorMessage","context","rawPath","TypeRouteError","buildErrorCollection","Path_may_not_be_an_empty_string","errorCode","getDetails","Path_must_start_with_a_forward_slash","Path_may_not_end_with_a_forward_slash","Path_may_not_include_characters_that_must_be_URL_encoded","segment","leading","trailing","paramId","invalidCharacters","split","filter","character","encodeURIComponent","join","Path_may_not_include_empty_segments","Path_may_have_at_most_one_parameter_per_segment","parameterNames","Path_parameters_may_not_be_used_more_than_once_when_building_a_path","parameterName","Optional_path_parameters_may_not_have_any_text_around_the_parameter","leadingText","trailingText","messages","push","Path_may_have_at_most_one_optional_or_trailing_parameter","numOptionalTrailingParameterNames","Optional_or_trailing_path_parameters_may_only_appear_in_the_last_path_segment","All_path_parameters_must_be_used_in_path_construction","unusedParameters","Path_parameter_name_must_not_include_curly_brackets_dollar_signs_or_the_forward_slash_character","paramName","Extension_route_definition_parameter_names_may_not_be_the_same_as_base_route_definition_parameter_names","duplicateParameterNames","Expected_type_does_not_match_actual_type","valueName","expectedType","actualType","JSON","stringify","map","line","Expected_number_of_arguments_does_match_actual_number","args","min","max","length","Query_string_array_format_and_custom_query_string_serializer_may_not_both_be_provided","Expected_length_of_array_does_match_actual_length","array","Encountered_unexpected_parameter_when_building_route","unexpectedParameterName","allowedParameterNames","name","Missing_required_parameter_when_building_route","missingParameterName","Base_url_must_start_with_a_forward_slash","baseUrl","Base_url_must_not_contain_any_characters_that_must_be_url_encoded","replace","App_should_be_wrapped_in_a_RouteProvider_component","Invalid_React_version","version","definitions","errors","Object","keys","forEach","key","messageTitle","create","message","detail","error","Error","asArray","assert","assertions","arrayLength","numArgs","collectionOfType","valuePropertyNames","propertyName","type","arrayOfType","index","expectedTypeList","expectsProperType","toUpperCase","buildPathDefs","pathParamDefCollection","getRawPath","namedPathParamDefs","namedPathParameterDefinition","paramIdCollection","indexOf","getParamId","Infinity","errorContext","rawPathSegments","slice","usedPathParams","pathDef","rawSegment","includedParamDef","paramDef","optional","namedParamDef","numOptionalOrTrailingParams","part","lastPathSegmentParameterDefinition","unusedPathParameterDefinitions","getParamDefsOfType","paramDefCollection","filteredParamDefCollection","kind","createLocation","paramCollection","arraySeparator","queryStringSerializer","pathDefs","params","path","query","state","paramValue","undefined","urlEncodeDefault","urlEncode","valueSerializer","valueSerializerId","id","rawParam","hasQueryParams","reduce","fullPath","result","noMatch","__noMatch","stringUtils","startsWith","endsWith","splitFirst","start","i","end","first","rest","getPathMatch","match","primaryPath","numExtraneousParams","pathHasTrailingSlash","pathSegmentList","segmentIndex","pathSegmentDef","pathSegment","numRemainingPathSegmentDefs","pathSegmentMinusLeading","pathSegmentMinusLeadingAndTrailing","parse","decodeURIComponent","some","Math","getObjectMatch","object","paramDefs","namedParamDefs","extraneousParams","raw","getStateMatch","getQueryMatch","createMatcher","queryParamDefCollection","stateParamDefCollection","defaultParams","param","routerLocation","pathMatch","queryMatch","stateMatch","preventDefaultLinkClickBehavior","event","e","isModifiedEvent","metaKey","altKey","ctrlKey","shiftKey","isSelfTarget","target","defaultPrevented","button","preventDefault","buildRoute","location","routerContext","navigate","history","href","createHref","pathname","search","route","link","onClick","action","createRouteBuilder","routeDef","getRouterContext","build","call","arguments","paramKey","paramsWithDefault","defineProperty","Route","createQueryStringSerializer","queryStringArrayFormat","multiKey","arrayKeySuffix","queryParams","rawParamName","rawParamValue","encodedName","valueParts","getMatchingRoute","getRoutes","routes","nonExactMatch","convertToRouterLocationFromHistoryLocation","rawLocation","getRouteByHref","createNavigationHandlerManager","startListening","stopListening","handlerIdList","idCounter","add","getHandlers","handler","remove","splice","attemptScrollToTop","scrollToTop","window","scroll","navigator","userAgent","serializeStateParams","routeDefs","sortedParams","sort","createRouter","parseArgs","opts","navigationHandlerManager","unlisten","listen","update","skipNextEnvironmentTriggeredNavigation","toLowerCase","handleNavigation","arrayFormat","separator","queryString","skipHandlingNextApplicationTriggeredNavigation","initialRoute","previousRoute","blockerCollection","applySessionOpts","session","createRouteBuilderCollection","router","back","amount","go","forward","getInitialRoute","reset","block","blocker","unblock","retry","findIndex","item","sessionOpts","document","createMemoryHistory","initialEntries","initialIndex","createHashHistory","createBrowserHistory","hash","defineRoute","assertDefineRouteOrExtendArgs","parent","extend","parentParamNames","extensionParamNames","duplicateParamNames","x","parentPathArray","childPathArray","concat","parentPath","childPath","allowedKeys","filteredX","functionName","boolean","number","isNumeric","parseFloat","toString","isNaN","test","string","json","getParamDefKindSection","getParamDefOptionalitySection","getParamDef","ofType","internal","createGroup","groupItems","routeNames","isRouteGroup","has","React","parseInt","major","minor","coreCreateRouter","routeContext","RouteProvider","useRoute","props","setRoute","Provider","children"],"mappings":"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"}